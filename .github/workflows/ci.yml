name: Next.js Build & Static Export

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Added for manual testing

concurrency:
  # Prevent overlapping runs on the same branch.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build, Lint, and Export Static Site
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 1: Set up Node.js Environment with Built-in Caching
      # This step replaces your old Step 2 and Step 3 (npm global cache).
      - name: Use Node.js 18.x and Cache npm modules
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm' # Use built-in caching for global npm dependencies

      # Step 2: Cache Next.js build cache (Still necessary for speed)
      - name: Cache Next.js build cache
        uses: actions/cache@v4
        with:
          # Note: The 'out' folder is the static export, .next/cache is the build speedup cache.
          path: |
            .next/cache
            node_modules # Add node_modules here for dependency reuse
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Step 3: Install dependencies
      # Simplified to npm ci, as this is best practice and ensures a clean build.
      - name: Install dependencies
        run: npm ci

      # Step 4: Run lint check
      - name: Lint
        run: npm run lint

      # Step 5: Build Next.js project (This step now performs the static export via next.config.ts)
      - name: Build and Export Static Site
        run: npm run build
        # Requires 'output: "export"' in next.config.ts to output to 'out/'

      # Step 6: Package the static build output
      # Files are in 'out/' from the build step (Step 5).
      - name: Package static output
        # Changed the artifact name to match the previous one you used for continuity
        run: zip -r project-harmony-frontend-static.zip out

      # Step 7: Upload the packaged artifact
      - name: Upload static artifact
        uses: actions/upload-artifact@v4
        with:
          name: project-harmony-frontend-static
          path: project-harmony-frontend-static.zip
          # Path changed to the zip file, as uploading the raw 'out' folder is simpler
          # but uploading a single zip file is what your original Step 9 achieved.